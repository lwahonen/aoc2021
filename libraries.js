"use strict";
exports.__esModule = true;
exports.fetchInputData = exports.parseMap = exports.levenshtein = void 0;
var fs = require("fs");
var levenshtein = function (a, b) {
    var matrix = Array.from({ length: a.length })
        .map(function () { return Array.from({ length: b.length })
        .map(function () { return 0; }); });
    for (var i = 0; i < a.length; i++)
        matrix[i][0] = i;
    for (var i = 0; i < b.length; i++)
        matrix[0][i] = i;
    for (var j = 0; j < b.length; j++)
        for (var i = 0; i < a.length; i++)
            matrix[i][j] = Math.min((i == 0 ? 0 : matrix[i - 1][j]) + 1, (j == 0 ? 0 : matrix[i][j - 1]) + 1, (i == 0 || j == 0 ? 0 : matrix[i - 1][j - 1]) + (a[i] == b[j] ? 0 : 1));
    return matrix[a.length - 1][b.length - 1];
};
exports.levenshtein = levenshtein;
var parseMap = function (input) {
    var r = input.split("\n");
    var tiles = r.map(function (f) { return f.split(""); });
    var patches = {};
    var x_max = tiles[0].length;
    var y_max = tiles.length;
    for (var y = 0; y < y_max; y++) {
        for (var x = 0; x < x_max; x++) {
            patches["".concat(x, ",").concat(y)] = tiles[y][x];
        }
    }
    return patches;
};
exports.parseMap = parseMap;
function fetchInputData(year, day) {
    var path1 = "/Users/lwahonen/Dropbox/advent/2018/data/day_".concat(year, "_").concat(day, ".txt");
    if (fs.existsSync(path1)) {
        var file = fs.readFileSync(path1, 'utf-8');
        return file;
    }
    var cookie = fs.readFileSync("/Users/lwahonen/.aoc_cookie", 'utf-8').trim();
    var sync_fetch = require('sync-fetch');
    var cookie1 = "session=".concat(cookie);
    var data = sync_fetch("https://adventofcode.com/".concat(year, "/day/").concat(day, "/input"), {
        headers: {
            Cookie: cookie1
        }
    }).text();
    fs.writeFileSync(path1, data);
    return data;
}
exports.fetchInputData = fetchInputData;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlicmFyaWVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibGlicmFyaWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHVCQUF5QjtBQUdsQixJQUFNLFdBQVcsR0FBRyxVQUFDLENBQVMsRUFBRSxDQUFTO0lBQzVDLElBQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBQyxDQUFDO1NBQ3hDLEdBQUcsQ0FBQyxjQUFNLE9BQUEsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFDLENBQUM7U0FDcEMsR0FBRyxDQUFDLGNBQU0sT0FBQSxDQUFDLEVBQUQsQ0FBQyxDQUFDLEVBRE4sQ0FDTSxDQUFDLENBQUE7SUFFdEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFO1FBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUVuRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUU7UUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBRW5ELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRTtRQUM3QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUU7WUFDN0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQ25CLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFD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OUIsT0FBTyxJQUFJLENBQUE7QUFFZixDQUFDO0FBakJELHdDQWlCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGZzIGZyb20gXCJmc1wiO1xuaW1wb3J0IHtleGVjU3luY30gZnJvbSBcImNoaWxkX3Byb2Nlc3NcIjtcblxuZXhwb3J0IGNvbnN0IGxldmVuc2h0ZWluID0gKGE6IHN0cmluZywgYjogc3RyaW5nKTogbnVtYmVyID0+IHtcbiAgICBjb25zdCBtYXRyaXggPSBBcnJheS5mcm9tKHtsZW5ndGg6IGEubGVuZ3RofSlcbiAgICAgICAgLm1hcCgoKSA9PiBBcnJheS5mcm9tKHtsZW5ndGg6IGIubGVuZ3RofSlcbiAgICAgICAgICAgIC5tYXAoKCkgPT4gMCkpXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIG1hdHJpeFtpXVswXSA9IGlcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykgbWF0cml4WzBdW2ldID0gaVxuXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBiLmxlbmd0aDsgaisrKVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBtYXRyaXhbaV1bal0gPSBNYXRoLm1pbihcbiAgICAgICAgICAgICAgICAoaSA9PSAwID8gMCA6IG1hdHJpeFtpIC0gMV1bal0pICsgMSxcbiAgICAgICAgICAgICAgICAoaiA9PSAwID8gMCA6IG1hdHJpeFtpXVtqIC0gMV0pICsgMSxcbiAgICAgICAgICAgICAgICAoaSA9PSAwIHx8IGogPT0gMCA/IDAgOiBtYXRyaXhbaSAtIDFdW2ogLSAxXSkgKyAoYVtpXSA9PSBiW2pdID8gMCA6IDEpXG4gICAgICAgICAgICApXG5cbiAgICByZXR1cm4gbWF0cml4W2EubGVuZ3RoIC0gMV1bYi5sZW5ndGggLSAxXVxufVxuXG5leHBvcnQgY29uc3QgcGFyc2VNYXAgPSAoaW5wdXQ6IHN0cmluZykgPT4ge1xuICAgIGxldCByID0gaW5wdXQuc3BsaXQoXCJcXG5cIilcbiAgICBsZXQgdGlsZXMgPSByLm1hcChmID0+IGYuc3BsaXQoXCJcIikpXG5cbiAgICBsZXQgcGF0Y2hlcyA9IHt9XG4gICAgbGV0IHhfbWF4ID0gdGlsZXNbMF0ubGVuZ3RoXG4gICAgbGV0IHlfbWF4ID0gdGlsZXMubGVuZ3RoXG5cbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHlfbWF4OyB5KyspIHtcbiAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB4X21heDsgeCsrKSB7XG4gICAgICAgICAgICBwYXRjaGVzW2Ake3h9LCR7eX1gXSA9IHRpbGVzW3ldW3hdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYXRjaGVzXG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGZldGNoSW5wdXREYXRhKHllYXI6IG51bWJlciwgZGF5OiBudW1iZXIpIHtcbiAgICBsZXQgcGF0aDEgPSBgL1VzZXJzL2x3YWhvbmVuL0Ryb3Bib3gvYWR2ZW50LzIwMTgvZGF0YS9kYXlfJHt5ZWFyfV8ke2RheX0udHh0YDtcbiAgICBpZiAoZnMuZXhpc3RzU3luYyhwYXRoMSkpIHtcbiAgICAgICAgY29uc3QgZmlsZSA9IGZzLnJlYWRGaWxlU3luYyhwYXRoMSwgJ3V0Zi04Jyk7XG4gICAgICAgIHJldHVybiBmaWxlO1xuICAgIH1cbiAgICBjb25zdCBjb29raWUgPSBmcy5yZWFkRmlsZVN5bmMoYC9Vc2Vycy9sd2Fob25lbi8uYW9jX2Nvb2tpZWAsICd1dGYtOCcpLnRyaW0oKTtcbiAgICBjb25zdCBzeW5jX2ZldGNoID0gcmVxdWlyZSgnc3luYy1mZXRjaCcpXG4gICAgbGV0IGNvb2tpZTEgPSBgc2Vzc2lvbj0ke2Nvb2tpZX1gO1xuICAgIGxldCBkYXRhID0gc3luY19mZXRjaChgaHR0cHM6Ly9hZHZlbnRvZmNvZGUuY29tLyR7eWVhcn0vZGF5LyR7ZGF5fS9pbnB1dGAsIHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgQ29va2llOiBjb29raWUxXG4gICAgICAgIH1cbiAgICB9KS50ZXh0KCk7XG4gICAgZnMud3JpdGVGaWxlU3luYyhwYXRoMSwgZGF0YSk7XG4gICAgcmV0dXJuIGRhdGFcblxufSJdfQ==